import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output

import pandas as pd
import plotly.graph_objs as go

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__)

# Load Data
df = pd.read_csv("data/openFEMA_claims20190430.csv", encoding='utf-8', parse_dates=['dateofloss'])
cat_columns = ['agriculturestructureindicator', 'basementenclosurecrawlspacetype', 'condominiumindicator', 'countycode', 'elevatedbuildingindicator', 'elevationcertificateindicator', 'censustract', 'floodzone', 'houseworship', 'locationofcontents', 'numberoffloorsintheinsuredbuilding', 'nonprofitindicator', 'obstructiontype', 'occupancytype', 'postfirmconstructionindicator', 'ratemethod', 'smallbusinessindicatorbuilding', 'state', 'reportedzipcode', 'primaryresidence']
df[cat_columns] = df[cat_columns].astype('category')
df['year'] = df['dateofloss'].dt.year
df['month'] = df['dateofloss'].dt.month
df.drop(columns=['yearofloss', 'lowestfloorelevation', 'asofdate'], inplace=True)

df_state = df.groupby('state')['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim'].mean()
df_state.columns = ['Amount Paid on Building Claim', 'Amount Paid on Contents Claim']

navbar = dbc.NavbarSimple(
    children=[
        dbc.NavItem(dbc.NavLink("Link", href="#")),
        dbc.DropdownMenu(
            nav=True,
            in_navbar=True,
            label="Menu",
            children=[
                dbc.DropdownMenuItem("Entry 1"),
                dbc.DropdownMenuItem("Entry 2"),
                dbc.DropdownMenuItem(divider=True),
                dbc.DropdownMenuItem("Entry 3"),
            ],
        ),
    ],
    brand="openFEMA claims data",
    brand_href="#",
    sticky="top",
)

body = dbc.Container(
    [
        dbc.Row(
            [
                dbc.Col(
                    [
                        html.Div([
                            html.P("Filter  Map", className='control_label'),
                            dcc.Dropdown(
                                id='data-type',
                                options=[{'label': i, 'value': i} for i in df_state.columns],
                                style= {
                                    'font-size': '14px',
                                    'width':'250px'
                                },
                                value='Amount Paid on Building Claim'
                            ),
                        ]),
                    ],
                    md=3,
                ),
                dbc.Col(
                    [
                        dcc.Graph(
                            id='usa-map'
                        ),
                    ]
                ),
            ]
        )
    ],
    className="mt-4",
)

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])

app.layout = html.Div([navbar, body])

@app.callback(
    Output('usa-map', 'figure'),
    [Input('data-type', 'value')]
)
def update_map(data):
    return {
            'data': [go.Choropleth(
                    locations = df_state.index,
                    z = round(df_state[data], 2),
                    locationmode = 'USA-states',
                    colorscale = 'Reds',
                    colorbar_title = "USD")
            ],
            'layout': go.Layout(
                title_text = data + ' by State',
                geo_scope='usa', # limite map scope to USA
            )
        }

if __name__ == '__main__':
    app.run_server(debug=True)