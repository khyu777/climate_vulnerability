import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output

import pandas as pd
import plotly.graph_objs as go

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

# Load Data
df = pd.read_csv("data/openFEMA_claims20190430.csv", encoding='utf-8', parse_dates=['dateofloss'])
cat_columns = ['agriculturestructureindicator', 'basementenclosurecrawlspacetype', 'condominiumindicator', 'countycode', 'elevatedbuildingindicator', 'elevationcertificateindicator', 'censustract', 'floodzone', 'houseworship', 'locationofcontents', 'numberoffloorsintheinsuredbuilding', 'nonprofitindicator', 'obstructiontype', 'occupancytype', 'postfirmconstructionindicator', 'ratemethod', 'smallbusinessindicatorbuilding', 'state', 'reportedzipcode', 'primaryresidence']
df[cat_columns] = df[cat_columns].astype('category')
df['year'] = df['dateofloss'].dt.year
df['month'] = df['dateofloss'].dt.month
df.drop(columns=['yearofloss', 'lowestfloorelevation', 'asofdate'], inplace=True)

df_year_claims = df.groupby(['year'])['amountpaidoncontentsclaim', 'amountpaidonbuildingclaim'].mean().reset_index()

navbar = dbc.NavbarSimple(
    children=[
        dbc.NavItem(dbc.NavLink("Link", href="#")),
        dbc.DropdownMenu(
            nav=True,
            in_navbar=True,
            label="Menu",
            children=[
                dbc.DropdownMenuItem("Entry 1"),
                dbc.DropdownMenuItem("Entry 2"),
                dbc.DropdownMenuItem(divider=True),
                dbc.DropdownMenuItem("Entry 3"),
            ],
        ),
    ],
    brand="openFEMA claims data",
    brand_href="#",
    sticky="top",
)

claim_map = html.Div(
    [
        dbc.Row(
            [
                dbc.Col(
                    html.Div([
                        html.P("Filter  Map", className='control_label'),
                        dcc.Dropdown(
                            id='data-type',
                            options=[
                                {'label': 'Building Claim', 'value': 'Amount Paid on Building Claim'},
                                {'label': 'Contents Claim', 'value': 'Amount Paid on Contents Claim'}
                                ],
                            style= {
                                'font-size': '14px',
                                'width':'150px'
                            },
                            value='Amount Paid on Building Claim'
                        ),
                    ]),
                    width={'size':1},
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            dcc.Graph(id='usa-map'),
                            dcc.RangeSlider(
                                id='year-slider',
                                min = df['year'].min(),
                                max = df['year'].max(),
                                value = [df['year'].min(), df['year'].max()],
                                marks = {
                                    str(year): {
                                        'label': str(year),
                                        'style': {'transform': 'rotate(-45deg)' 'scale(0.8,0.8)' 'translate(-20px, -10px)'}
                                        } for year in df['year'].unique()
                                    },
                            )
                        ],
                    ),
                    width = {'size':4},
                ),
                dbc.Col(
                    dbc.Card(
                        dcc.Graph(
                            id='trend',
                            figure={
                                'data': [
                                    go.Scatter(
                                        y=df_year_claims['amountpaidoncontentsclaim'],
                                        x=df_year_claims['year'],
                                        mode='lines+markers',
                                        name='Amount Paid on Contents Claim'
                                        ),
                                    go.Scatter(
                                        y=df_year_claims['amountpaidonbuildingclaim'],
                                        x=df_year_claims['year'],
                                        mode='lines+markers',
                                        name='Amount Paid on Building Claim'
                                        )
                                    ],
                                'layout': go.Layout(
                                    title='TITLE',
                                    showlegend=True,
                                    legend=dict(x=0.1, y=0.98),
                                    paper_bgcolor='rgba(0,0,0,0)',
                                    plot_bgcolor='rgba(0,0,0,0)'
                                )
                            }
                        )
                    ),
                    width={'size': 5}
                ),
            ],
            justify="center",
            style={
                'padding-bottom': '30px'
            }
        ),
    ],
    className="mt-4",
)

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])

app.layout = html.Div(
    [
        navbar,
        claim_map,
    ]
)

@app.callback(
    Output('usa-map', 'figure'),
    [Input('data-type', 'value'),
    Input('year-slider', 'value')]
)
def update_map(data, year_value):
    df_year = df[df['year'].between(year_value[0], year_value[1])]
    dff_state = df_year.groupby('state')['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim'].mean()
    dff_state.columns = ['Amount Paid on Building Claim', 'Amount Paid on Contents Claim']
    return {
            'data': [go.Choropleth(
                    locations = dff_state.index,
                    z = round(dff_state[data], 2),
                    locationmode = 'USA-states',
                    colorscale = 'Reds',
                    colorbar_title = "USD")
            ],
            'layout': go.Layout(
                title_text = data + ' by State',
                geo_scope='usa', # limite map scope to USA
            )
        }

if __name__ == '__main__':
    app.run_server(debug=True)