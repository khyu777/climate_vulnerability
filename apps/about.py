import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc

from app import app

business_objective = dbc.Card(
    [
        dbc.CardBody(
            [
                dcc.Markdown(
                    children = ('''
                    ### **Buisness Objective**

                    This project was created to help organizations to identify areas where they should focus their disaster relief efforts. The motivation comes from the recent increase in the number of extreme climate events and limited resources organizations have to respond to these events. By providing organizations with the Climate Vulnerability Index which helps ientify vulnerable areas, they can allocate their resources more efficientily and maximize disaster response.
                    '''),
                    className="card-text",
                )
            ]
        ),
    ],
    style={"width":"50rem"}
)

data = dbc.Card(
    [
        dbc.CardBody(
            [
                dcc.Markdown('''
                    ### **Data**

                    Data used for this project come from the following sources:

                    * The U.S. Census
                    * openFEMA datasets
                    * National Climatic Data Center (NCDC)

                    To develop the Climate Vulnerability Index, I combined data from these sources. Features include population density, median household income, average temperature, precipitation, and flood insurance claims payout amount. The data was aggregated by month and by state.              
                ''')
            ]
        ),
    ],
    style={"width":"50rem"}
)

model = dbc.Card(
    [
        dbc.CardBody(
            [
                dcc.Markdown(
                    dangerously_allow_html=True,
                    children=(
                        '''
                        ### **Machine Learning Models Used**

                        ##### *Random Forest Regressor*
                        This model was used for the prediction of flood insurance claims payout amount using the NFIP dataset from openFEMA. The model was trained on over 2 million claims payout observations and has R<sup>2</sup> value of 0.51.

                        ##### *K-Means Clustering*
                        This clustering algorithm was used to label each area at a given time as "high risk" or "low risk" in the combined monthly dataset. Looking at the dataset after labeling, the model seems to cluster the areas quite well. The labels were then averaged over time by state to produce the Climate VUlnerability Index.
                        '''
                    )
                )
            ]
        ),
    ],
    style={"width":"50rem"}
)

website_instructions = dbc.Card(
    [
        dbc.CardBody(
            [
                dcc.Markdown('''
                    ### **Using the Website**

                    The front page has three components:

                    1. An interactive map of Climate Vulnerability Index in the U.S.
                    2. Recent trend in various natural disasters in the U.S.
                    3. Flood insurance claims payout prediction tool

                    Using the first two components should be self-explanatory. Hovering over the map or the graph will provide exact values.

                    To use the prediction tool, enter data for all the input fields provided and press the submit button to get the expected claims payout amount for the building.

                    To take a closer look at the data used, visit the "Explore Data" page, which contains various maps and graphs representing the data.

                    To access the raw data, click the dropdown menu "Datasets', which provides links to respective dataset pages.

                ''')
            ]
        ),
    ],
    style={"width":"50rem"}
)

layout = html.Div([
    dbc.Row(business_objective, justify='center', style={"padding":"10px"}),
    dbc.Row(data, justify='center', style={"padding":"10px"}),
    dbc.Row(model, justify='center', style={"padding":"10px"}),
    dbc.Row(website_instructions, justify='center', style={"padding":"10px"})
])