import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output

import plotly.graph_objs as go
from apps.data_processing import df, df_year_claims, df_lr, cat_columns, disaster_nums, model, model1

from app import app

claim_map = html.Div(
    [
        dbc.Row(
            [
                dbc.Col(
                    html.Div([
                        html.P("Filter  Map", className='control_label'),
                        dcc.Dropdown(
                            id='data-type',
                            options=[
                                {'label': 'Building Claim', 'value': 'Amount Paid on Building Claim'},
                                {'label': 'Contents Claim', 'value': 'Amount Paid on Contents Claim'}
                                ],
                            style= {
                                'font-size': '14px',
                                'width':'150px'
                            },
                            value='Amount Paid on Building Claim'
                        ),
                    ]),
                    width={'size':1},
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            dcc.Graph(id='usa-map'),
                            dcc.RangeSlider(
                                id='year-slider',
                                min = df['yearofloss'].min(),
                                max = df['yearofloss'].max(),
                                value = [df['yearofloss'].min(), df['yearofloss'].max()],
                                marks = {
                                    str(year): {
                                        'label': str(year),
                                        'style': {'transform': 'rotate(-65deg)' 'scale(0.8,0.8)' 'translate(-20px, -10px)'}
                                        } for year in df['yearofloss'].unique()
                                    },
                            )
                        ],
                    ),
                    width = {'size':6},
                ),
                dbc.Col(
                    [
                        dbc.Card(
                            dcc.Graph(
                                id='trend',
                                figure={
                                    'data': [
                                        go.Scatter(
                                            y=df_year_claims['amountpaidoncontentsclaim'],
                                            x=df_year_claims['yearofloss'],
                                            mode='lines+markers',
                                            name='Amount Paid on Contents Claim'
                                            ),
                                        go.Scatter(
                                            y=df_year_claims['amountpaidonbuildingclaim'],
                                            x=df_year_claims['yearofloss'],
                                            mode='lines+markers',
                                            name='Amount Paid on Building Claim'
                                            )
                                        ],
                                    'layout': go.Layout(
                                        title='Claim Amount over Time by Type',
                                        showlegend=True,
                                        legend=dict(x=0.1, y=1),
                                        paper_bgcolor='rgba(0,0,0,0)',
                                        plot_bgcolor='rgba(0,0,0,0)',
                                        height=375,
                                        margin={
                                            'l': 40,
                                            'r': 40,
                                            'b': 40,
                                            't': 60,
                                        }
                                    )
                                }
                            )
                        ),
                        dbc.Row(
                            [
                                dbc.Col(
                                    html.H6(
                                        'Category for Graph Below'
                                    ),
                                    width={'size':4}
                                ),
                                dbc.Col(
                                    dcc.Dropdown(
                                        id='cat-type',
                                        options=[
                                            {'label': i, 'value': i} for i in cat_columns
                                            ],
                                        style= {
                                            'font-size': '14px',
                                            'width':'300px'
                                        },
                                        value='numberoffloorsintheinsuredbuilding'
                                    ),
                                    width={'size':5.5}
                                )
                            ],
                            align='center',
                            justify='center'
                        ),
                        dbc.Card(
                            dcc.Graph(
                                id='categorical',
                            )
                        ),
                    ],
                    width={'size':4},
                )
            ],
            justify="center",
            style={
                'padding-bottom': '50px'
            }
        ),
    ],
    className="mt-4",
)

disaster_map = html.Div(
    [
        dbc.Row(
            [
                dbc.Col(
                    html.Div([
                        dcc.Dropdown(
                        id='disaster-type',
                        options=[
                            {'label': i, 'value': i} for i in disaster_nums['incidentType'].unique()
                            ],
                        style= {
                            'font-size': '14px',
                            'width':'150px'
                        },
                        value='Flood'
                        )
                    ]),
                    width={'size':1}
                ),
                dbc.Col(
                    dbc.Card(
                        [
                            dcc.Graph(id='disaster-map'),
                            dcc.RangeSlider(
                                id='ds-year-slider',
                                min = disaster_nums['yearofloss'].min(),
                                max = disaster_nums['yearofloss'].max(),
                                value = [disaster_nums['yearofloss'].min(), disaster_nums['yearofloss'].max()],
                                marks = {
                                    str(year): {
                                        'label': str(year),
                                        'style': {'transform': 'rotate(-65deg)' 'scale(0.8,0.8)' 'translate(-20px, -10px)'}
                                        } for year in disaster_nums['yearofloss'].unique()
                                    },
                            )
                        ]
                    ),
                    width = {'size':6}
                ),
                dbc.Col(
                    [dbc.Card(
                        [
                            dcc.Graph(
                                id='lin-reg',
                                figure={
                                    'data': [
                                        go.Scatter(
                                            x = df_lr['incidentType'], y = df_lr['amountpaidonbuildingclaim'], mode='markers', showlegend=False
                                            ),
                                        go.Scatter(
                                            x = df_lr['incidentType'], y = model.params[0]+model.params[1]*df_lr['incidentType'], name='Regression Line'
                                            ),
                                    ],
                                    'layout': go.Layout(
                                        title="Building Claim vs. Flood Count",
                                        xaxis=go.layout.XAxis(
                                            title=go.layout.xaxis.Title(
                                                text="Flood Count"
                                            )
                                        ),
                                        yaxis=go.layout.YAxis(
                                            title=go.layout.yaxis.Title(
                                                text="Building Claim ($)"
                                            )
                                        ),
                                        showlegend=True,
                                        legend=dict(x=0.7, y=1),
                                        paper_bgcolor='rgba(0,0,0,0)',
                                        plot_bgcolor='rgba(0,0,0,0)',
                                        height=390,
                                        margin={
                                            'l': 60,
                                            'r': 60,
                                            'b': 40,
                                            't': 60,
                                        }
                                    )
                                }
                            )
                        ],
                    ),
                    dbc.Card(
                        [
                            dcc.Graph(
                                id='lin-reg1',
                                figure={
                                    'data': [
                                        go.Scatter(
                                            x = df_lr['incidentType'], y = df_lr['amountpaidoncontentsclaim'], mode='markers', name='Contents Claim Amount', marker=dict(color='Red'), showlegend=False
                                            ),
                                        go.Scatter(
                                            x = df_lr['incidentType'], y = model1.params[0]+model1.params[1]*df_lr['incidentType'], name='Regression Line', marker=dict(color='Green')
                                            )
                                    ],
                                    'layout': go.Layout(
                                        title="Contents Claim vs. Flood Count",
                                        xaxis=go.layout.XAxis(
                                            title=go.layout.xaxis.Title(
                                                text="Flood Count"
                                            )
                                        ),
                                        yaxis=go.layout.YAxis(
                                            title=go.layout.yaxis.Title(
                                                text="Contents Claim Amount ($)"
                                            )
                                        ),
                                        showlegend=True,
                                        legend=dict(x=0.7, y=1),
                                        paper_bgcolor='rgba(0,0,0,0)',
                                        plot_bgcolor='rgba(0,0,0,0)',
                                        height=390,
                                        margin={
                                            'l': 60,
                                            'r': 60,
                                            'b': 40,
                                            't': 60,
                                        }
                                    )
                                }
                            )
                        ],
                    )],
                    width={'size':4}
                ),
            ],
            justify = 'center'
        ),
    ]
)

layout = html.Div([
    claim_map,
    disaster_map
])

@app.callback(
    Output('usa-map', 'figure'),
    [Input('data-type', 'value'),
    Input('year-slider', 'value')]
)
def update_map(data, year_value):
    df_year = df[df['yearofloss'].between(year_value[0], year_value[1])]
    dff_state = df_year.groupby('state')['amountpaidonbuildingclaim', 'amountpaidoncontentsclaim'].mean()
    dff_state.columns = ['Amount Paid on Building Claim', 'Amount Paid on Contents Claim']
    return {
            'data': [go.Choropleth(
                    locations = dff_state.index,
                    z = round(dff_state[data], 2),
                    locationmode = 'USA-states',
                    colorscale = 'Reds',
                    colorbar_title = "USD")
            ],
            'layout': go.Layout(
                title_text = data + ' by State',
                geo_scope='usa', # limite map scope to USA
                height=730,
                margin={
                    'l': 25,
                    'r': 0,
                    'b': 25,
                    't': 100,
                }
            )
        }

@app.callback(
    Output('categorical', 'figure'),
    [Input('cat-type', 'value')]
)

def update_cat_bar(column):
    df_cat = df.groupby(column)['amountpaidonbuildingclaim'].mean().reset_index()
    return {
            'data': [
                go.Bar(
                    y=df_cat['amountpaidonbuildingclaim'],
                    x=df_cat[column]
                    )
                ],
            'layout': go.Layout(
                title='Amount of Building Claim by ' + str(column),
                showlegend=False,
                legend=dict(x=0.1, y=0.95),
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                height=375,
                margin={
                    'l': 40,
                    'r': 40,
                    'b': 40,
                    't': 60,
                }
            )
        }


@app.callback(
    Output('disaster-map', 'figure'),
    [
        Input('disaster-type', 'value'),
        Input('ds-year-slider', 'value')
    ]
)

def update_ds_map(disaster, year_value):
    df_count_year = disaster_nums[disaster_nums['incidentType'] == disaster].groupby(['state', 'yearofloss'])['incidentType'].count().reset_index()
    df_ds_year = df_count_year[df_count_year['yearofloss'].between(year_value[0], year_value[1])]
    dff_year_claims = df_ds_year.groupby('state')['incidentType'].sum()
    return {
        'data': [
            go.Choropleth(
                locations = dff_year_claims.index,
                z = dff_year_claims,
                locationmode = 'USA-states',
                colorscale = 'Blues'
            )
        ],
        'layout': go.Layout(
            title_text = str(disaster) + " Count by State (" + str(year_value[0]) + " - " + str(year_value[1]) + ")",
            geo_scope = 'usa',
            height=730,
            margin={
                'l': 25,
                'r': 0,
                'b': 25,
                't': 100,
            }
        )
    }