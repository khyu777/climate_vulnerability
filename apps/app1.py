import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

import plotly.graph_objs as go
from apps.data_processing import df, df_year_claims, df_lr, columns, cat_columns, num_columns, disaster_nums, model, model1, df_merged
import pandas as pd
import joblib

from app import app

claim_model = html.Div(
    [
        dbc.Row(
            [
                dbc.Col(
                    dbc.Card(
                        [
                            dcc.Graph(
                                id='vulnerability-map',
                                figure={
                                    'data': [
                                        go.Choropleth(
                                            locations = df_merged['state'],
                                            z = round(df_merged['labels'], 2),
                                            locationmode = 'USA-states',
                                            colorscale = 'OrRd',
                                            colorbar_title = "Score",
                                            reversescale=False
                                        )
                                    ],
                                    'layout': go.Layout(
                                        title_text = 'Climate Vulnerability Index by State',
                                        titlefont = dict(size=24),
                                        geo_scope='usa', # limite map scope to USA
                                        height=795,
                                        margin={
                                            'l': 15,
                                            'r': 25,
                                            'b': 25,
                                            't': 75,
                                        }
                                    )
                                })
                        ],
                    ),
                    width = {'size':6},
                ),
                dbc.Col(
                    [
                        dbc.Row(
                            [
                                dbc.Col(
                                    html.H6(
                                        'Type of Disaster: '
                                    ),
                                    width={'size':3}
                                ),
                                dbc.Col(
                                    dcc.Dropdown(
                                        id='type-of-disaster',
                                        options=[
                                            {'label': i, 'value': i} for i in disaster_nums['incidentType'].unique()
                                        ],
                                        style= {
                                            'font-size': '14px',
                                            'width':'160px'
                                        },
                                        value='Flood'
                                    ),
                                    width={'size':2},
                                    style={'padding-bottom':5, 'margin-top':0}
                                )
                            ],
                            align='center',
                            justify='center'
                        ),
                        dbc.Card(
                            dcc.Graph(
                                id='disaster-trend'
                            ),
                            style={'margin-bottom':10}
                        ),
                        dbc.Card([
                            html.H5('Flood Insurance Claim Payout Prediction'),
                            dbc.Row(
                                [dbc.Col(
                                    [dcc.Dropdown(
                                        id='agriculture',
                                        options = [
                                            {'label': i, 'value': i} for i in df['agriculturestructureindicator'].unique()
                                        ],
                                        placeholder = "Agriculture Structure"
                                        #value='Y'
                                    ),
                                    dcc.Dropdown(
                                        id='basement_enclosure',
                                        options = [
                                            {'label': i, 'value': i} for i in df['basementenclosurecrawlspacetype'].unique()
                                        ],
                                        placeholder = "Basement Closure Type"
                                        #value='0'
                                    ),
                                    dcc.Dropdown(
                                        id='condominium',
                                        options = [
                                            {'label': i, 'value': i} for i in df['condominiumindicator'].unique()
                                        ],
                                        placeholder = "Condominium"
                                        #value='N'
                                    ),
                                    dcc.Dropdown(
                                        id='elevated_building',
                                        options = [
                                            {'label': i, 'value': i} for i in df['elevatedbuildingindicator'].unique()
                                        ],
                                        placeholder = "Elevated Building"
                                        #value='Y'
                                    ),
                                    dcc.Dropdown(
                                        id='elevation_certificate',
                                        options = [
                                            {'label': i, 'value': i} for i in df['elevationcertificateindicator'].unique()
                                        ],
                                        placeholder = "Elevation Certificate"
                                        #value=1
                                    ),
                                    dcc.Dropdown(
                                        id='floodzone',
                                        options = [
                                            {'label': i, 'value': i} for i in df['floodzone'].unique()
                                        ],
                                        placeholder = "Flood Zone"
                                        #value='X'
                                    ),
                                    dcc.Dropdown(
                                        id='house_worship',
                                        options = [
                                            {'label': i, 'value': i} for i in df['houseworship'].unique()
                                        ],
                                        placeholder = "House Worship"
                                        #value='N'
                                    ),
                                    dcc.Dropdown(
                                        id='contents_location',
                                        options = [
                                            {'label': i[:10], 'value': i} for i in df['locationofcontents'].unique()
                                        ],
                                        placeholder = "Location of Contents"
                                        #value='nan'
                                    ),
                                    dcc.Dropdown(
                                        id='number_floors',
                                        options = [
                                            {'label': i, 'value': i} for i in df['numberoffloorsintheinsuredbuilding'].unique()
                                        ],
                                        placeholder = "# of Floors"
                                        #value='1'
                                    ),
                                    dcc.Dropdown(
                                        id='nonprofit',
                                        options = [
                                            {'label': i, 'value': i} for i in df['nonprofitindicator'].unique()
                                        ],
                                        placeholder = "Nonprofit"
                                        #value='Y'
                                    )],
                                    width = {'size':4}
                                ),
                                dbc.Col(
                                    [dcc.Dropdown(
                                        id='obstruction',
                                        options = [
                                            {'label': i, 'value': i} for i in df['obstructiontype'].unique()
                                        ],
                                        placeholder = "Obstruction Type"
                                        #value='10.0'
                                    ),
                                    dcc.Dropdown(
                                        id='occupancy',
                                        options = [
                                            {'label': i, 'value': i} for i in df['occupancytype'].unique()
                                        ],
                                        placeholder = "Occupancy Type"
                                        #value=1
                                    ),
                                    dcc.Dropdown(
                                        id='postfirm_construction',
                                        options = [
                                            {'label': i, 'value': i} for i in df['postfirmconstructionindicator'].unique()
                                        ],
                                        placeholder = "Post-firm Construction"
                                        #value='Y'
                                    ),
                                    dcc.Dropdown(
                                        id='rate_method',
                                        options = [
                                            {'label': i, 'value': i} for i in df['ratemethod'].unique()
                                        ],
                                        placeholder = "Rate Method"
                                        #value='B'
                                    ),
                                    dcc.Dropdown(
                                        id='small_business',
                                        options = [
                                            {'label': i, 'value': i} for i in sorted(df['smallbusinessindicatorbuilding'].unique())
                                        ],
                                        placeholder = "Small Business"
                                        #value='Y'
                                    ),
                                    dcc.Dropdown(
                                        id='state',
                                        options = [
                                            {'label': i, 'value': i} for i in df['state'].unique()
                                        ],
                                        placeholder = "State"
                                        #value='NY'
                                    ),
                                    dcc.Dropdown(
                                        id='primary_residence',
                                        options = [
                                            {'label': i, 'value': i} for i in sorted(df['primaryresidence'].unique())
                                        ],
                                        placeholder = "Primary Residence"
                                        #value='Y'
                                    ),
                                    dcc.Input(
                                        id='basefloodelevation',
                                        type="number",
                                        placeholder = 'Base Flood Elevation'
                                        #value=1000
                                    ),
                                    dcc.Input(
                                        id='policycount',
                                        type="number",
                                        placeholder = 'Policy Count'
                                        #value=1
                                    ),
                                    dcc.Input(
                                        id='countycode',
                                        type="number",
                                        placeholder = 'County Code'
                                        #value=10101
                                    )],
                                    width={'size':4}
                                ),
                                dbc.Col(
                                    [
                                        dcc.Input(
                                            id='crsdiscount',
                                            type="number",
                                            placeholder = 'CRS Discount'
                                            #value=1
                                        ),
                                        dcc.Input(
                                            id='elevationdiff',
                                            type="number",
                                            placeholder = 'Elevation Difference'
                                            #value=1000
                                        ),
                                        dcc.Input(
                                            id='lat',
                                            type="number",
                                            placeholder = 'Latitude'
                                            #value=-90
                                        ),
                                        dcc.Input(
                                            id='long',
                                            type="number",
                                            placeholder = 'Longitude'
                                            #value=90
                                        ),
                                        dcc.Input(
                                            id='lag',
                                            type="number",
                                            placeholder = 'Lowest Adjacent Grade'
                                            #value=1
                                        ),
                                        dcc.Input(
                                            id='lfe',
                                            type="number",
                                            placeholder = 'Lowest Flood Elevation'
                                            #value=1000
                                        ),
                                        dcc.Input(
                                            id='totbuildinsu',
                                            type="number",
                                            placeholder = 'Total Building Insurance Coverage'
                                            #value=10000
                                        ),
                                        dcc.Input(
                                            id='totcontinsu',
                                            type="number",
                                            placeholder = 'Total Contents Insurance Coverage'
                                            #value=10000
                                        ),
                                        dcc.Input(
                                            id='monthol',
                                            type="number",
                                            placeholder = 'Month of Loss'
                                            #value=1
                                        ),
                                        dcc.Input(
                                            id='dayol',
                                            type="number",
                                            placeholder = 'Day of Loss'
                                            #value=1
                                        )
                                    ],
                                    width = {'size':4}
                                )],
                                style={'padding-bottom':5}
                            ),
                            dbc.Row(
                                [
                                    dbc.Col(
                                        html.Button('Run Prediction', id='predict_button'),
                                        width={'size':3, 'offset':1}
                                    ),
                                    html.Div(id='user_input', style={'display':'none'}),
                                    dbc.Col(
                                        html.Div(id='prediction')
                                    )
                                ]
                            )
                        ],
                        color="light",
                        style={'padding':10}
                        )
                    ],
                    width={'size':5},
                )
            ],
            justify="center",
            style={
                'padding-bottom': '50px'
            }
        ),
    ],
    className="mt-4",
)

@app.callback(
    Output('user_input', 'children'),
    [
        Input('agriculture', 'value'),
        Input('basement_enclosure', 'value'),
        Input('condominium', 'value'),
        Input('elevated_building', 'value'),
        Input('elevation_certificate', 'value'),
        Input('floodzone', 'value'),
        Input('house_worship', 'value'),
        Input('contents_location', 'value'),
        Input('number_floors', 'value'),
        Input('nonprofit', 'value'),
        Input('obstruction', 'value'),
        Input('occupancy', 'value'),
        Input('postfirm_construction', 'value'),
        Input('rate_method', 'value'),
        Input('small_business', 'value'),
        Input('state', 'value'),
        Input('primary_residence', 'value'),
        Input('basefloodelevation', 'value'),
        Input('policycount', 'value'),
        Input('countycode', 'value'),
        Input('crsdiscount', 'value'),
        Input('elevationdiff', 'value'),
        Input('lat', 'value'),
        Input('long', 'value'),
        Input('lag', 'value'),
        Input('lfe', 'value'),
        Input('totbuildinsu', 'value'),
        Input('totcontinsu', 'value'),
        Input('monthol', 'value'),
        Input('dayol', 'value')
    ]
)
def predict(agriculture, basement_enclosure, condominium, elevated_building, elevation_certificate, floodzone, house_worship, contents_location, number_floors, nonprofit, obstruction, occupancy, postfirm_construction, rate_method, small_business, state, primary_residence, basefloodelevation, policycount, countycode, crsdiscount, elevationdiff, lat, long, lag, lfe, totbuildinsu, totcontinsu, monthol, dayol):
    df = pd.DataFrame([[agriculture, basefloodelevation, basement_enclosure, condominium, policycount, countycode, crsdiscount, elevated_building, elevation_certificate, elevationdiff, floodzone, house_worship, lat, contents_location, long, lag, lfe, number_floors, nonprofit, obstruction, occupancy, postfirm_construction, rate_method, small_business, state, totbuildinsu, totcontinsu, primary_residence, monthol, dayol]])
    return df.to_json()

@app.callback(
    Output('prediction', 'children'),
    [
        Input('user_input', 'children'),
        Input('predict_button', 'n_clicks')
    ]
)
def run_model(data, n_clicks):
    if n_clicks != None:
        if not data:
            return 'No value entered'
        elif 'null' in data:
            return 'At least one value is missing. Please enter all values for prediction.'
        df = pd.read_json(data)
        df.columns = ['agriculturestructureindicator', 'basefloodelevation', 'basementenclosurecrawlspacetype', 'condominiumindicator', 'policycount', 'countycode', 'crsdiscount', 'elevatedbuildingindicator', 'elevationcertificateindicator', 'elevationdifference', 'floodzone', 'houseworship', 'latitude', 'locationofcontents', 'longitude', 'lowestadjacentgrade', 'lowestfloorelevation', 'numberoffloorsintheinsuredbuilding', 'nonprofitindicator', 'obstructiontype', 'occupancytype', 'postfirmconstructionindicator', 'ratemethod', 'smallbusinessindicatorbuilding', 'state', 'totalbuildinginsurancecoverage', 'totalcontentsinsurancecoverage', 'primaryresidence', 'monthofloss', 'dayofloss']
        model = joblib.load('model/randomforestregressor_small.pkl')
        return 'Predicted Insuarance Payout: $ {}'.format(round(model.predict(df)[0], 2))

@app.callback(
    Output('disaster-trend', 'figure'),
    [
        Input('type-of-disaster', 'value')
    ]
)
def update_disaster_trend(disaster_type):
    disaster_count_year = disaster_nums[disaster_nums['incidentType'] == disaster_type].groupby(['yearofloss'])['incidentType'].count().reset_index()
    return {
        'data': [
            go.Bar(
                x = disaster_count_year['yearofloss'],
                y = disaster_count_year['incidentType']
            )
        ],
        'layout': go.Layout(
            annotations=[
                go.layout.Annotation(
                    x=0.5,
                    y=-0.2,
                    showarrow=False,
                    text="Year",
                    font=dict(size=16),
                    xref="paper",
                    yref="paper"
                )
            ],
            yaxis={
                'title': '{} Count'.format(str(disaster_type)),
                'title_font': {'size':16}
            },
            title_text='Trend in Number of Disasters',
            height=300,
            margin={
                'l': 75,
                'r': 25,
                'b': 50,
                't': 45,
            }
        )
    }


layout = html.Div([
    claim_model
])